// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clientGRPCJsonXml

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RPCServiceClient is the client API for RPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCServiceClient interface {
	GetPersonByPhoneNumber(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	EditPeople(ctx context.Context, opts ...grpc.CallOption) (RPCService_EditPeopleClient, error)
	ListPeopleByPhoneType(ctx context.Context, in *Message, opts ...grpc.CallOption) (RPCService_ListPeopleByPhoneTypeClient, error)
	GetPeopleById(ctx context.Context, opts ...grpc.CallOption) (RPCService_GetPeopleByIdClient, error)
}

type rPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCServiceClient(cc grpc.ClientConnInterface) RPCServiceClient {
	return &rPCServiceClient{cc}
}

func (c *rPCServiceClient) GetPersonByPhoneNumber(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/addressbook.RPCService/GetPersonByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) EditPeople(ctx context.Context, opts ...grpc.CallOption) (RPCService_EditPeopleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPCService_serviceDesc.Streams[0], "/addressbook.RPCService/EditPeople", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServiceEditPeopleClient{stream}
	return x, nil
}

type RPCService_EditPeopleClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type rPCServiceEditPeopleClient struct {
	grpc.ClientStream
}

func (x *rPCServiceEditPeopleClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCServiceEditPeopleClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCServiceClient) ListPeopleByPhoneType(ctx context.Context, in *Message, opts ...grpc.CallOption) (RPCService_ListPeopleByPhoneTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPCService_serviceDesc.Streams[1], "/addressbook.RPCService/ListPeopleByPhoneType", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServiceListPeopleByPhoneTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_ListPeopleByPhoneTypeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type rPCServiceListPeopleByPhoneTypeClient struct {
	grpc.ClientStream
}

func (x *rPCServiceListPeopleByPhoneTypeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCServiceClient) GetPeopleById(ctx context.Context, opts ...grpc.CallOption) (RPCService_GetPeopleByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPCService_serviceDesc.Streams[2], "/addressbook.RPCService/GetPeopleById", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServiceGetPeopleByIdClient{stream}
	return x, nil
}

type RPCService_GetPeopleByIdClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type rPCServiceGetPeopleByIdClient struct {
	grpc.ClientStream
}

func (x *rPCServiceGetPeopleByIdClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCServiceGetPeopleByIdClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServiceServer is the server API for RPCService service.
// All implementations must embed UnimplementedRPCServiceServer
// for forward compatibility
type RPCServiceServer interface {
	GetPersonByPhoneNumber(context.Context, *Message) (*Message, error)
	EditPeople(RPCService_EditPeopleServer) error
	ListPeopleByPhoneType(*Message, RPCService_ListPeopleByPhoneTypeServer) error
	GetPeopleById(RPCService_GetPeopleByIdServer) error
	mustEmbedUnimplementedRPCServiceServer()
}

// UnimplementedRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServiceServer struct {
}

func (UnimplementedRPCServiceServer) GetPersonByPhoneNumber(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonByPhoneNumber not implemented")
}
func (UnimplementedRPCServiceServer) EditPeople(RPCService_EditPeopleServer) error {
	return status.Errorf(codes.Unimplemented, "method EditPeople not implemented")
}
func (UnimplementedRPCServiceServer) ListPeopleByPhoneType(*Message, RPCService_ListPeopleByPhoneTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPeopleByPhoneType not implemented")
}
func (UnimplementedRPCServiceServer) GetPeopleById(RPCService_GetPeopleByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPeopleById not implemented")
}
func (UnimplementedRPCServiceServer) mustEmbedUnimplementedRPCServiceServer() {}

// UnsafeRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServiceServer will
// result in compilation errors.
type UnsafeRPCServiceServer interface {
	mustEmbedUnimplementedRPCServiceServer()
}

func RegisterRPCServiceServer(s grpc.ServiceRegistrar, srv RPCServiceServer) {
	s.RegisterService(&_RPCService_serviceDesc, srv)
}

func _RPCService_GetPersonByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetPersonByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addressbook.RPCService/GetPersonByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetPersonByPhoneNumber(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_EditPeople_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServiceServer).EditPeople(&rPCServiceEditPeopleServer{stream})
}

type RPCService_EditPeopleServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type rPCServiceEditPeopleServer struct {
	grpc.ServerStream
}

func (x *rPCServiceEditPeopleServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCServiceEditPeopleServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPCService_ListPeopleByPhoneType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServiceServer).ListPeopleByPhoneType(m, &rPCServiceListPeopleByPhoneTypeServer{stream})
}

type RPCService_ListPeopleByPhoneTypeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type rPCServiceListPeopleByPhoneTypeServer struct {
	grpc.ServerStream
}

func (x *rPCServiceListPeopleByPhoneTypeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _RPCService_GetPeopleById_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServiceServer).GetPeopleById(&rPCServiceGetPeopleByIdServer{stream})
}

type RPCService_GetPeopleByIdServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type rPCServiceGetPeopleByIdServer struct {
	grpc.ServerStream
}

func (x *rPCServiceGetPeopleByIdServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCServiceGetPeopleByIdServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "addressbook.RPCService",
	HandlerType: (*RPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonByPhoneNumber",
			Handler:    _RPCService_GetPersonByPhoneNumber_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EditPeople",
			Handler:       _RPCService_EditPeople_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListPeopleByPhoneType",
			Handler:       _RPCService_ListPeopleByPhoneType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPeopleById",
			Handler:       _RPCService_GetPeopleById_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/addressbook.proto",
}
